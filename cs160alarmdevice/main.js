/* *     Copyright (C) 2010-2016 Marvell International Ltd. *     Copyright (C) 2002-2010 Kinoma, Inc. * *     Licensed under the Apache License, Version 2.0 (the "License"); *     you may not use this file except in compliance with the License. *     You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * *     Unless required by applicable law or agreed to in writing, software *     distributed under the License is distributed on an "AS IS" BASIS, *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *     See the License for the specific language governing permissions and *     limitations under the License. */import Pins from "pins";Handler.bind("/playAudio", Behavior({    onInvoke: function(handler, message){       	var data = parseQuery(message.query);	    Sound.volume = data.volume;	    model.sound = new Sound("assets/" + data.url);        model.sound.play();       	application.start();    }}));Handler.bind("/stopAudio", Behavior({    onInvoke: function(handler, message) {        Sound.volume = 0.0;        application.stop();      }}));let model = application.behavior = Behavior ({    onLaunch(application) {        this.sound = undefined;        application.interval = 8000;        application.shared = true;        Pins.configure({            alarm: {                require: "Digital",                pins: {                    ground: { pin: 51, type: "Ground" },                    digital: { pin: 52, direction: "input" },                },            },            synced: {            	require: "Digital",            	pins: {            		ground: { pin: 61, type: "Ground" },                    digital: { pin: 62, direction: "output" },            	}            },            thumpPrint: {                require: "Digital",                pins: {                    ground: { pin: 53, type: "Ground" },                    digital: { pin: 54, direction: "input" },                },            },            gps: {                require: "MTK3339",                pins: {                    serial: {tx: 63, rx: 64}                }            },
        },  success => {            if (success) {                Pins.share("ws", {zeroconf: true, name: "pins-share-led"});            };        });    },    onQuit(application) {        application.shared = false;    },    onTimeChanged(application) {        if (this.sound) this.sound.play();    }})//first set up the pins. Wrap setup calls in the onLaunch function.